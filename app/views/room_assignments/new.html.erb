<div class="page-header">
  <h1 class="header-title"><%= t('room_assignments.new') %></h1>
  <div class="header-actions">
    <%= link_to t('common.cancel'), room_assignments_path, class: "btn btn-outline" %>
  </div>
</div>

<div class="form-container">
  <%= form_with(model: @room_assignment, local: true) do |form| %>
    <% if @room_assignment.errors.any? %>
      <div class="alert alert-danger">
        <h2><%= pluralize(@room_assignment.errors.count, "error") %> <%= t('common.form_error') %>:</h2>
        <ul>
          <% @room_assignment.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="form-group">
      <%= form.label :room_id, t('room_assignments.room'), class: "form-label" %>
      <div class="d-flex align-items-center">
        <%= form.collection_select :room_id, @available_rooms, :id, :number, 
                                { prompt: t('room_assignments.select_room', default: 'Select a room') }, 
                                { class: "form-select", id: "room_assignment_room_id", required: true } %>
        <div id="room-status-indicator" class="ms-2 d-none">
          <span class="badge bg-info">
            <i class="fas fa-users me-1"></i> <span id="tenant-count">0</span> <%= t('tenants.tenant', count: 0) %>
          </span>
        </div>
      </div>
      <small id="room-status-help" class="form-text text-muted mt-1 d-none">
        <%= t('room_assignments.add_to_occupied') %>
      </small>
    </div>

    <div class="form-group">
      <label class="form-label"><%= t('room_assignments.select_tenants') %></label>
      <div class="d-flex align-items-center mb-2">
        <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="show-all-tenants">
          <label class="form-check-label text-muted" for="show-all-tenants">
            <%= t('room_assignments.show_all_tenants') %>
          </label>
        </div>
      </div>
      
      <div class="tenant-select-container mb-3">
        <select id="tenant-multiselect" name="tenant_ids[]" class="form-select" multiple data-placeholder="<%= t('room_assignments.select_tenants_placeholder') %>">
          <% @available_tenants.each do |tenant| %>
            <option value="<%= tenant.id %>"><%= tenant.name %></option>
          <% end %>
        </select>
        <div id="tenant-badge" class="mt-2">
          <span class="badge bg-success">
            <i class="fas fa-check-circle me-1"></i> <%= t('room_assignments.unassigned_only') %>
          </span>
        </div>
        <small class="form-text text-muted">
          <%= t('room_assignments.tenant_selection_help') %>
        </small>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :start_date, t('room_assignments.start_date'), class: "form-label" %>
      <%= form.date_field :start_date, value: Date.current, class: "form-control", required: true %>
    </div>

    <div class="form-group">
      <%= form.label :deposit_amount, t('room_assignments.deposit_amount') + " (VND)", class: "form-label" %>
      <%= form.number_field :deposit_amount, class: "form-control", min: 0 %>
    </div>

    <div class="form-group">
      <%= form.label :notes, t('common.notes'), class: "form-label" %>
      <%= form.text_area :notes, class: "form-control", rows: 3 %>
    </div>

    <div class="form-actions">
      <%= form.submit t('room_assignments.create_assignment', default: 'Create Assignment'), class: "btn btn-primary" %>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize select2 for multiple selection
    $('#tenant-multiselect').select2({
      width: '100%',
      multiple: true,
      closeOnSelect: false,
      placeholder: '<%= t('room_assignments.select_tenants_placeholder') %>',
      allowClear: true
    });

    // Room status data
    const roomStatus = {
      <% @available_rooms.each do |room| %>
        <%= room.id %>: {
          status: "<%= room.status %>",
          tenantCount: <%= room.tenants.joins(:room_assignments).where(room_assignments: { active: true, room_id: room.id }).count %>
        },
      <% end %>
    };

    // Update room status display when room selection changes
    const roomSelector = document.getElementById('room_assignment_room_id');
    const statusIndicator = document.getElementById('room-status-indicator');
    const tenantCountElement = document.getElementById('tenant-count');
    const statusHelpText = document.getElementById('room-status-help');

    roomSelector.addEventListener('change', function() {
      const roomId = this.value;
      
      if (roomId && roomStatus[roomId]) {
        const room = roomStatus[roomId];
        
        if (room.status === 'occupied' && room.tenantCount > 0) {
          // Show occupied room indicator
          statusIndicator.classList.remove('d-none');
          statusHelpText.classList.remove('d-none');
          tenantCountElement.textContent = room.tenantCount;
        } else {
          // Hide indicator for available rooms
          statusIndicator.classList.add('d-none');
          statusHelpText.classList.add('d-none');
        }
      } else {
        // Hide indicator when no room is selected
        statusIndicator.classList.add('d-none');
        statusHelpText.classList.add('d-none');
      }
    });

    // Trigger change event if room is pre-selected (e.g., when coming from room details page)
    if (roomSelector.value) {
      roomSelector.dispatchEvent(new Event('change'));
    }
    
    // Handle tenant toggle switch
    const showAllTenantsToggle = document.getElementById('show-all-tenants');
    const tenantBadge = document.getElementById('tenant-badge');
    const tenantMultiselect = $('#tenant-multiselect');
    
    showAllTenantsToggle.addEventListener('change', function() {
      if (this.checked) {
        // Show all tenants (fetch via AJAX)
        fetchAllTenants();
        
        // Update the badge
        tenantBadge.innerHTML = `
          <span class="badge bg-warning text-dark">
            <i class="fas fa-users me-1"></i> <%= t('room_assignments.all_tenants') %>
          </span>
        `;
      } else {
        // Reset to only unassigned tenants
        location.reload();
      }
    });
    
    // Function to fetch all tenants via AJAX
    function fetchAllTenants() {
      fetch('/tenants.json')
        .then(response => response.json())
        .then(data => {
          // Save the current selections
          const currentSelections = tenantMultiselect.val() || [];
          
          // Clear the current options
          tenantMultiselect.empty();
          
          // Add all tenants
          data.forEach(tenant => {
            const option = new Option(tenant.name, tenant.id);
            
            // Mark assigned tenants with a special text
            if (tenant.has_active_assignment) {
              option.text += ' <%= t('room_assignments.currently_assigned') %>';
              option.classList.add('text-muted');
            }
            
            tenantMultiselect.append(option);
          });
          
          // Restore the selections if possible
          tenantMultiselect.val(currentSelections).trigger('change');
        })
        .catch(error => {
          console.error('Error fetching tenants:', error);
        });
    }
  });
</script>
