<% content_for :title, t('smart_devices.lock.unlock_record_title', name: @smart_device.name) %>

<% content_for :styles do %>
<style>
  /* Progress bar styles */
  #sync_progress_container {
    margin-bottom: 1rem;
  }
  
  .sync-progress {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
  }
  
  .sync-progress .progress {
    height: 20px;
    margin-bottom: 10px;
  }
  
  .sync-progress.completed {
    background-color: #d1e7dd;
  }
  
  .sync-progress.error {
    background-color: #f8d7da;
  }
  
  .progress-message {
    font-size: 14px;
    font-weight: 500;
  }
  
  /* Fix for mobile table layout */
  @media (max-width: 767px) {
    .data-table td[data-label]::before {
      content: attr(data-label);
      float: left;
      font-weight: 600;
      color: #6c757d;
      margin-right: 10px;
      display: none; /* Hide the data-label text */
    }
    
    /* Fix underline issue */
    h1.h5, h6.text-primary {
      text-decoration: none !important;
      border-bottom: none !important;
      font-weight: 500;
    }
    
    /* Improve table layout on mobile */
    .table-responsive {
      border: none;
      margin: 0;
    }
    
    .data-table td {
      display: table-cell;
      text-align: left;
    }
  }
  
  /* Fix pagination styling */
  .pagination {
    display: flex;
    justify-content: center;
    padding-left: 0;
    list-style: none;
  }
  
  .pagination > li {
    display: inline-block;
    margin: 0 2px;
  }
  
  .pagination > li > a, 
  .pagination > li > span {
    position: relative;
    float: left;
    padding: 6px 12px;
    text-decoration: none;
    color: #0d6efd;
    background-color: #fff;
    border: 1px solid #dee2e6;
    border-radius: 0.25rem;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
  }
  
  .pagination > .active > a, 
  .pagination > .active > span {
    color: #fff;
    background-color: #0d6efd;
    border-color: #0d6efd;
    z-index: 3;
  }
  
  .pagination > li > a:hover, 
  .pagination > li > span:hover {
    color: #0a58ca;
    background-color: #e9ecef;
    border-color: #dee2e6;
  }
  
  /* Fix date input format */
  input[type="date"] {
    min-height: 38px;
  }
</style>
<% end %>

<div class="container-fluid px-2 px-md-4">
  <!-- Using global floating progress bar instead of local progress container -->
  
  <!-- Responsive header section -->
  <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-3">
    <h1 class="h5 mt-3 mb-2">
      <i class="fas fa-history"></i>
      <%= t('smart_devices.lock.unlock_record_title', name: @smart_device.name) %>
    </h1>
    <div class="btn-toolbar mb-2 gap-2">
      <%= link_to smart_device_path(@smart_device), class: 'btn btn-outline-secondary btn-sm' do %>
        <i class="fas fa-chevron-left me-1"></i> <%= t('smart_devices.common.back_to_device') %>
      <% end %>
      
      <%= link_to sync_unlock_records_smart_device_path(@smart_device), method: :post, class: 'btn btn-info btn-sm', data: { turbo_method: :post } do %>
        <i class="fas fa-sync me-1"></i> <%= t('sync_unlock_records.sync_records_with_cloud') %>
      <% end %>
    </div>
  </div>

  <!-- Card with improved mobile layout -->
  <div class="card border-0 shadow mb-4">
    <div class="card-header bg-white p-3">
      <div class="d-flex flex-column">
        <h6 class="mb-3 font-weight-bold text-primary"><%= t('smart_devices.lock.filter', name: @smart_device.name) %></h6>
        
        <!-- Simplified date filter form for mobile -->
        <%= form_with url: device_unlock_records_smart_device_path(@smart_device), method: :get, id: 'filter-form', class: 'd-flex flex-column gap-2' do |f| %>
          <!-- Date filters -->
          <div class="d-flex flex-column flex-md-row gap-2 mb-2">
            <div class="input-group">
              <span class="input-group-text"><%= t('smart_devices.history.from_date') %></span>
              <%= f.date_field :start_date, value: params[:start_date], class: 'form-control' %>
            </div>
            
            <div class="input-group">
              <span class="input-group-text"><%= t('smart_devices.history.to_date') %></span>
              <%= f.date_field :end_date, value: params[:end_date], class: 'form-control' %>
            </div>
          </div>
          
          <!-- Additional filters -->
          <div class="d-flex flex-column flex-md-row gap-2 mb-2">
            <div class="input-group">
              <span class="input-group-text"><%= t('smart_devices.history.user') %></span>
              <%= f.select :user_id,
                  options_from_collection_for_select(@smart_device.device_users, :user_id, :name, params[:user_id]),
                  { include_blank: t('common.all_items', items: t('smart_devices.history.user')) },
                  { class: 'form-select' }
              %>
            </div>
            
            <div class="input-group">
              <span class="input-group-text"><%= t('smart_devices.lock.unlock_methods.method') %></span>
              <%= f.select :unlock_sn, 
                  @smart_device.device_users.where.not(unlock_sn: nil).distinct.pluck(:unlock_name, :unlock_sn),
                  { include_blank: "-- #{t('common.all')} --", selected: params[:unlock_sn] },
                  { class: "form-select" } %>
            </div>
            
            <div class="input-group">
              <span class="input-group-text"><%= t('tenants.title') %></span>
              <%= f.select :tenant_id, 
                  DeviceUser.where(smart_device_id: @smart_device.id).where.not(tenant_id: nil).joins(:tenant).distinct.pluck('tenants.name', 'tenants.id'),
                  { include_blank: "-- #{t('common.all')} --", selected: params[:tenant_id] },
                  { class: "form-select" } %>
            </div>
          </div>
          
          <!-- Action buttons -->
          <div class="d-flex gap-2">
            
            <% if params[:start_date].present? || params[:end_date].present? || 
                 params[:user_id].present? || params[:unlock_sn].present? || params[:tenant_id].present? %>
              <%= link_to device_unlock_records_smart_device_path(@smart_device), class: 'btn btn-sm btn-outline-secondary' do %>
                <i class="fas fa-times me-1"></i><%= t('common.clear') %>
              <% end %>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
    
    <div class="card-body p-0">
      <% if @unlock_records && @unlock_records.any? %>
        <!-- Total count display -->
        <div class="bg-light p-3 border-bottom">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <span class="fw-medium" id="records-count">
                <i class="fas fa-list-ul me-1"></i> <%= t('smart_devices.history.total_records', count: @total_count) %>
              </span>             
            </div>           
          </div>
        </div>
        
        <div id="records-table-container">
          <div class="table-responsive">
            <table class="table table-hover table-sm align-middle mb-0 data-table">
              <thead class="table-light">
                <tr>
                  <th class="px-3 py-2"><%= t('smart_devices.history.time') %></th>
                  <th class="px-3 py-2"><%= t('smart_devices.history.user') %></th>
                  <th class="px-3 py-2"><%= t('smart_devices.history.method') %></th>
                  <th class="px-3 py-2"><%= t('smart_devices.history.status') %></th>
                </tr>
              </thead>
              <tbody id="records-table-body">
                <% @unlock_records.each do |record| %>
                  <tr>
                    <td class="px-3 py-2" data-label="<%= t('smart_devices.history.time') %>">
                      <div class="fw-medium"><%= record.time.getlocal("+07:00").strftime("%Y-%m-%d") %></div>
                      <small class="text-muted"><%= record.time.getlocal("+07:00").strftime("%H:%M:%S") %></small>
                    </td>
                    <td class="px-3 py-2" data-label="<%= t('smart_devices.history.user') %>">
                      <% if record.device_user %>
                        <div class="d-flex align-items-center">
                          <% if record.device_user.avatar_url.present? %>
                            <img src="<%= record.device_user.avatar_url %>" alt="<%= t('smart_devices.history.user_avatar') %>" class="rounded-circle me-2" style="width: 32px; height: 32px; object-fit: cover;">
                          <% else %>
                            <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" style="width: 32px; height: 32px;">
                              <%= record.device_user.name.first.upcase rescue '?' %>
                            </div>
                          <% end %>
                          <div>
                            <div class="fw-medium text-truncate" style="max-width: 120px;"><%= record.device_user.name %></div>
                            <small class="text-muted d-none d-md-block"><%= record.user_name %></small>
                          </div>
                        </div>
                      <% else %>
                        <%= record.user_name || t('smart_devices.history.unknown_user') %>
                      <% end %>
                    </td>
                    <td class="px-3 py-2" >
                    <% case record.unlock_method 
                       when "VÃ¢n tay", t('smart_devices.history.fingerprint') %>
                      <span class="badge bg-info bg-opacity-10 text-info border border-info border-opacity-25 px-2 py-1">
                        <i class="fas fa-fingerprint me-1 d-none d-md-inline"></i> <%= t('smart_devices.history.fingerprint') %>
                      </span>
                    <% when "Máº­t kháº©u", t('smart_devices.history.password') %>
                      <span class="badge bg-primary bg-opacity-10 text-primary border border-primary border-opacity-25 px-2 py-1">
                        <i class="fas fa-key me-1 d-none d-md-inline"></i> <%= t('smart_devices.history.password') %>
                      </span>
                    <% when "Tháº»", t('smart_devices.history.card') %>
                      <span class="badge bg-warning bg-opacity-10 text-warning border border-warning border-opacity-25 px-2 py-1">
                        <i class="fas fa-id-card me-1 d-none d-md-inline"></i> <%= t('smart_devices.history.card') %>
                      </span>
                    <% when "á»¨ng dá»¥ng", t('smart_devices.history.app') %>
                      <span class="badge bg-success bg-opacity-10 text-success border border-success border-opacity-25 px-2 py-1">
                        <i class="fas fa-mobile-alt me-1 d-none d-md-inline"></i> <%= t('smart_devices.history.app') %>
                      </span>
                    <% else %>
                      <span class="badge bg-secondary bg-opacity-10 text-secondary border border-secondary border-opacity-25 px-2 py-1">
                        <i class="fas fa-question-circle me-1 d-none d-md-inline"></i> <%= record.unlock_method %>
                      </span>
                    <% end %>
                  </td>
                  <td class="px-3 py-2">
                    <% if record.success %>
                      <span class="badge bg-success"><%= t('smart_devices.history.success') %></span>
                    <% else %>
                      <span class="badge bg-danger"><%= t('smart_devices.history.failed') %></span>
                    <% end %>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      
        <!-- Responsive pagination -->
        <div class="d-flex justify-content-center p-3" id="records-pagination">
          <%= will_paginate @unlock_records, 
              renderer: BootstrapPaginationRenderer,
          
              class: 'pagination mb-0',
              previous_label: '&laquo;', 
              next_label: '&raquo;' %>
        </div>
        </div><!-- End of records-table-container -->
      <% else %>
        <div class="alert alert-info m-3">
          <i class="fas fa-info-circle me-2"></i> 
          <%= t('smart_devices.history.no_records_message') %>
          <%= link_to t('smart_devices.history.sync_from_tuya'), sync_unlock_records_smart_device_path(@smart_device), method: :post, class: "alert-link", data: { turbo_method: :post } %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<% content_for :scripts do %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded for unlock records page");
    
    // Handle form filtering
    const filterForm = document.getElementById('filter-form');
    if (filterForm) {
      const filterSelects = filterForm.querySelectorAll('select');
      if (filterSelects) {
        filterSelects.forEach(function(select) {
          select.addEventListener('change', function() {
            filterForm.submit();
          });
        });
      }
      
      // Add event listeners for date fields
      const startDateInput = filterForm.querySelector('input[name="start_date"]');
      const endDateInput = filterForm.querySelector('input[name="end_date"]');
      
      if (startDateInput) {
        startDateInput.addEventListener('change', function() {
          filterForm.submit();
        });
      }
      
      if (endDateInput) {
        endDateInput.addEventListener('change', function() {
          filterForm.submit();
        });
      }
    }
    
    // Poll interval in milliseconds
    const POLL_INTERVAL = 1000; // 1 second
    let pollingTimer = null;
    
    // Reference to progress container
    const progressContainer = document.getElementById('sync_progress_container');
    
    // Attach event handler to sync button
    const syncButton = document.querySelector('a[href*="sync_unlock_records"]');
    if (syncButton) {
      syncButton.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Disable the button to prevent multiple clicks
        syncButton.classList.add('disabled');
        syncButton.setAttribute('disabled', 'disabled');
        
        // Start the sync via AJAX
        const syncUrl = syncButton.getAttribute('href');
        const deviceId = <%= @smart_device.id %>;
        const deviceName = "<%= @smart_device.name %>";
        
        $.ajax({
          url: syncUrl,
          method: 'POST',
          dataType: 'json',
          headers: {
            'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
          },
          success: function(response) {
            console.log('Sync job started:', response);
            if (response.job_id) {
              // Use only the global SyncProgressManager for progress tracking
              if (typeof window.SyncProgressManager !== 'undefined') {
                console.log('Starting sync using SyncProgressManager');
                window.SyncProgressManager.startSync(deviceId, response.job_id, deviceName);
                
                // Re-enable the button after a few seconds
                setTimeout(function() {
                  enableSyncButton();
                }, 3000);
              } else {
                console.error('SyncProgressManager not available! Check if sync_progress_manager.js is properly loaded');
                enableSyncButton();
              }
            } else {
              console.log('Sync complete without job ID');
              enableSyncButton();
            }
          },
          error: function(xhr, status, error) {
            console.error('Error starting sync job:', error);
            updateProgressBar(100, "Lá»i: " + (xhr.responseJSON?.error || error), true, false);
            enableSyncButton();
          }
        });
      });
    }
    
    // We've removed all local polling and progress update functions
    // All progress tracking is now handled by the global SyncProgressManager
    
    // Function to re-enable the sync button
    function enableSyncButton() {
      if (syncButton) {
        syncButton.classList.remove('disabled');
        syncButton.removeAttribute('disabled');
      }
    }
  });
</script>
<% end %>